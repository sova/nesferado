["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$call-all","~$rum.util","~$collect","^4","~$collect*","^4"],"~:excludes",["~#set",["~$ref"]],"~:name","~$rum.core","~:imports",null,"~:requires",["^ ","~$rum.cursor","^>","~$gobj","~$goog.object","^@","^@","~$cljsjs.react","^A","~$rum.derived-atom","^B","~$sablono.core","^C","~$cljsjs.react.dom","^D","~$util","^4","^4","^4","~$cursor","^>","~$derived-atom","^B"],"~:uses",["^ ","^3","^4","^5","^4","^6","^4"],"~:defs",["^ ","~$mount",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","~:line",214,"~:column",7,"~:end-line",214,"~:end-column",12,"~:arglists",["~#list",["~$quote",["^S",[["~$element","~$node"]]]]],"~:doc","Add element to the DOM tree. Idempotent. Subsequent mounts will just update element."],"^:","~$rum.core/mount","~:variadic",false,"^M","resources/public/js/rum/core.cljs","^Q",12,"~:method-params",["^S",[["^U","^V"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^O",1,"^N",214,"^P",214,"~:max-fixed-arity",2,"~:fn-var",true,"^R",["^S",["^T",["^S",[["^U","^V"]]]]],"^W","Add element to the DOM tree. Idempotent. Subsequent mounts will just update element."],"~$unmount",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",221,"^O",7,"^P",221,"^Q",14,"^R",["^S",["^T",["^S",[["^V"]]]]],"^W","Removes component from the DOM tree."],"^:","~$rum.core/unmount","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",14,"^Z",["^S",[["^V"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",221,"^P",221,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^V"]]]]],"^W","Removes component from the DOM tree."],"~$local",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",312,"^O",7,"^P",312,"^Q",12,"^R",["^S",["^T",["^S",[["~$initial"],["^16","~$key"]]]]],"^W","Mixin constructor. Adds an atom to component’s state that can be used to keep stuff during component’s lifecycle. Component will be re-rendered if atom’s value changes. Atom is stored under user-provided key or under `:rum/local` by default.\n  \n   ```\n   (rum/defcs counter < (rum/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n   \n   (rum/mount (counter \"Click count: \"))\n   ```","~:top-fn",["^ ","^Y",false,"^11",2,"^Z",["^S",[["^16"],["^16","^17"]]],"^R",["^S",[["^16"],["^16","^17"]]],"^10",["^S",[null,null]]]],"^:","~$rum.core/local","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",12,"^18",["^ ","^Y",false,"^11",2,"^Z",["^S",[["^16"],["^16","^17"]]],"^R",["^S",[["^16"],["^16","^17"]]],"^10",["^S",[null,null]]],"^Z",["^S",[["^16"],["^16","^17"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",312,"^P",312,"^11",2,"^12",true,"^R",["^S",[["^16"],["^16","^17"]]],"^W","Mixin constructor. Adds an atom to component’s state that can be used to keep stuff during component’s lifecycle. Component will be re-rendered if atom’s value changes. Atom is stored under user-provided key or under `:rum/local` by default.\n  \n   ```\n   (rum/defcs counter < (rum/local 0 :cnt)\n     [state label]\n     (let [*cnt (:cnt state)]\n       [:div {:on-click (fn [_] (swap! *cnt inc))}\n         label @*cnt]))\n   \n   (rum/mount (counter \"Click count: \"))\n   ```"],"~$reactive",["^ ","^:","~$rum.core/reactive","^M","resources/public/js/rum/core.cljs","^N",341,"^O",1,"^P",341,"^Q",14,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",341,"^O",6,"^P",341,"^Q",14],"^W","Mixin. Works in conjunction with [[react]].\n  \n   ```\n   (rum/defc comp < rum/reactive\n     [*counter]\n     [:div (rum/react counter)])\n\n   (def *counter (atom 0))\n   (rum/mount (comp *counter) js/document.body)\n   (swap! *counter inc) ;; will force comp to re-render\n   ```"],"~$render-all",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",194,"^O",8,"^P",194,"^Q",18,"~:private",true,"^R",["^S",["^T",["^S",[["~$queue"]]]]]],"^1=",true,"^:","~$rum.core/render-all","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",18,"^Z",["^S",[["^1>"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",194,"^P",194,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^1>"]]]]]],"~$ref-node",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",281,"^O",7,"^P",281,"^Q",15,"^R",["^S",["^T",["^S",[["~$state","^17"]]]]],"^W","Given state and ref handle, returns DOM node associated with ref."],"^:","~$rum.core/ref-node","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",15,"^Z",["^S",[["^1A","^17"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",281,"^P",281,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^1A","^17"]]]]],"^W","Given state and ref handle, returns DOM node associated with ref."],"~$react",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",382,"^O",7,"^P",382,"^Q",12,"^R",["^S",["^T",["^S",[["^9"]]]]],"^W","Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom."],"^:","~$rum.core/react","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",12,"^Z",["^S",[["^9"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",382,"^P",382,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^9"]]]]],"^W","Works in conjunction with [[reactive]] mixin. Use this function instead of `deref` inside render, and your component will subscribe to changes happening to the derefed atom."],"~$schedule",["^ ","^:","~$rum.core/schedule","^M","resources/public/js/rum/core.cljs","^N",175,"^O",1,"^P",175,"^Q",24,"^1=",true,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",175,"^O",16,"^P",175,"^Q",24,"^1=",true]],"~$request-render",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",206,"^O",7,"^P",206,"^Q",21,"^R",["^S",["^T",["^S",[["~$component"]]]]],"^W","Schedules react component to be rendered on next animation frame."],"^:","~$rum.core/request-render","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",21,"^Z",["^S",[["^1H"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",206,"^P",206,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^1H"]]]]],"^W","Schedules react component to be rendered on next animation frame."],"~$render-queue",["^ ","^:","~$rum.core/render-queue","^M","resources/public/js/rum/core.cljs","^N",191,"^O",1,"^P",191,"^Q",28,"^1=",true,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",191,"^O",16,"^P",191,"^Q",28,"^1=",true]],"~$portal",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",233,"^O",7,"^P",233,"^Q",13,"^R",["^S",["^T",["^S",[["^U","^V"]]]]],"^W","Render `element` in a DOM `node` that is ouside of current DOM hierarchy."],"^:","~$rum.core/portal","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",13,"^Z",["^S",[["^U","^V"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",233,"^P",233,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^U","^V"]]]]],"^W","Render `element` in a DOM `node` that is ouside of current DOM hierarchy."],"~$with-key",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",241,"^O",7,"^P",241,"^Q",15,"^R",["^S",["^T",["^S",[["^U","^17"]]]]],"^W","Adds React key to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-key \"abc\")\n       (rum/mount js/document.body))\n   ```"],"^:","~$rum.core/with-key","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",15,"^Z",["^S",[["^U","^17"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",241,"^P",241,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^U","^17"]]]]],"^W","Adds React key to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-key \"abc\")\n       (rum/mount js/document.body))\n   ```"],"~$extend!",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",20,"^O",8,"^P",20,"^Q",15,"^1=",true,"^R",["^S",["^T",["^S",[["~$obj","~$props"]]]]]],"^1=",true,"^:","~$rum.core/extend!","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",15,"^Z",["^S",[["^1Q","^1R"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",20,"^P",20,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^1Q","^1R"]]]]]],"~$build-defcs",["^ ","~:no-doc",true,"^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",163,"^O",16,"^P",163,"^Q",27,"^1U",true,"^R",["^S",["^T",["^S",[["~$render-body","~$mixins","~$display-name"]]]]]],"^:","~$rum.core/build-defcs","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",27,"^Z",["^S",[["^1V","^1W","^1X"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",163,"^P",163,"^11",3,"^12",true,"^R",["^S",["^T",["^S",[["^1V","^1W","^1X"]]]]]],"~$*reactions*",["^ ","^:","~$rum.core/*reactions*","^M","resources/public/js/rum/core.cljs","^N",338,"^O",1,"^P",338,"^Q",37,"~:dynamic",true,"^1=",true,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",338,"^O",26,"^P",338,"^Q",37,"^20",true,"^1=",true]],"^9",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",275,"^O",7,"^P",275,"^Q",10,"^R",["^S",["^T",["^S",[["^1A","^17"]]]]],"^W","Given state and ref handle, returns React component."],"^:","~$rum.core/ref","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",10,"^Z",["^S",[["^1A","^17"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",275,"^P",275,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^1A","^17"]]]]],"^W","Given state and ref handle, returns React component."],"~$static",["^ ","^:","~$rum.core/static","^M","resources/public/js/rum/core.cljs","^N",289,"^O",1,"^P",289,"^Q",12,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",289,"^O",6,"^P",289,"^Q",12],"^W","Mixin. Will avoid re-render if none of component’s arguments have changed. Does equality check (`=`) on all arguments.\n  \n   ```\n   (rum/defc label < rum/static\n     [text]\n     [:div text])\n     \n   (rum/mount (label \"abc\") js/document.body)\n\n   ;; def != abc, will re-render\n   (rum/mount (label \"def\") js/document.body)\n\n   ;; def == def, won’t re-render\n   (rum/mount (label \"def\") js/document.body)\n   ```"],"^F",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",466,"^O",7,"^P",466,"^Q",13,"^R",["^S",["^T",["^S",[["^9","^17","~$&","~$options"]]]]],"^W","Same as [[cursor-in]] but accepts single key instead of path vector.","^18",["^ ","^Y",true,"^11",2,"^Z",[["^S",["^9","^17","^24"]]],"^R",["^S",[["^9","^17","~$&","^24"]]],"^10",["^S",[null]]]],"^:","~$rum.core/cursor","^Y",true,"^M","resources/public/js/rum/core.cljs","^Q",13,"^18",["^ ","^Y",true,"^11",2,"^Z",[["^S",["^9","^17","^24"]]],"^R",["^S",[["^9","^17","~$&","^24"]]],"^10",["^S",[null]]],"^Z",[["^S",["^9","^17","^24"]]],"^[",null,"^10",["^S",[null]],"^O",1,"^N",466,"^P",466,"^11",2,"^12",true,"^R",["^S",[["^9","^17","~$&","^24"]]],"^W","Same as [[cursor-in]] but accepts single key instead of path vector."],"^1A",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",14,"^O",7,"^P",14,"^Q",12,"^R",["^S",["^T",["^S",[["~$comp"]]]]],"^W","Given React component, returns Rum state associated with it."],"^:","~$rum.core/state","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",12,"^Z",["^S",[["^26"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",14,"^P",14,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^26"]]]]],"^W","Given React component, returns Rum state associated with it."],"~$cursor-in",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",438,"^O",7,"^P",438,"^Q",16,"^R",["^S",["^T",["^S",[["^9","~$path","~$&",["^ ","~:as","^24"]]]]]],"^W","Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n   ```\n   (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n   \n   (def ivan (rum/cursor db [:users \"Ivan\"]))\n   (deref ivan) ;; => { :age 30 }\n   \n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \"Ivan\" { :age 31 }}}\n   \n   (swap! db update-in [:users \"Ivan\" :age] inc)\n   ;; => { :users { \"Ivan\" { :age 32 }}}\n   \n   (deref ivan) ;; => { :age 32 }\n   ```\n  \n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n  \n   The only supported option is `:meta`","^18",["^ ","^Y",true,"^11",2,"^Z",[["^S",["^9","^29",["^ ","^2:","^24"]]]],"^R",["^S",[["^9","^29","~$&",["^ ","^2:","^24"]]]],"^10",["^S",[null]]]],"^:","~$rum.core/cursor-in","^Y",true,"^M","resources/public/js/rum/core.cljs","^Q",16,"^18",["^ ","^Y",true,"^11",2,"^Z",[["^S",["^9","^29",["^ ","^2:","^24"]]]],"^R",["^S",[["^9","^29","~$&",["^ ","^2:","^24"]]]],"^10",["^S",[null]]],"^Z",[["^S",["^9","^29",["^ ","^2:","^24"]]]],"^[",null,"^10",["^S",[null]],"^O",1,"^N",438,"^P",438,"^11",2,"^12",true,"^R",["^S",[["^9","^29","~$&",["^ ","^2:","^24"]]]],"^W","Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n   ```\n   (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n   \n   (def ivan (rum/cursor db [:users \"Ivan\"]))\n   (deref ivan) ;; => { :age 30 }\n   \n   (swap! ivan update :age inc) ;; => { :age 31 }\n   (deref db) ;; => { :users { \"Ivan\" { :age 31 }}}\n   \n   (swap! db update-in [:users \"Ivan\" :age] inc)\n   ;; => { :users { \"Ivan\" { :age 32 }}}\n   \n   (deref ivan) ;; => { :age 32 }\n   ```\n  \n   Returned value supports `deref`, `swap!`, `reset!`, watches and metadata.\n  \n   The only supported option is `:meta`"],"~$dom-node",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",269,"^O",7,"^P",269,"^Q",15,"^R",["^S",["^T",["^S",[["^1A"]]]]],"^W","Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can’t be called during render."],"^:","~$rum.core/dom-node","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",15,"^Z",["^S",[["^1A"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",269,"^P",269,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^1A"]]]]],"^W","Given state, returns top-level DOM node of component. Call it during lifecycle callbacks. Can’t be called during render."],"~$batch",["^ ","^:","~$rum.core/batch","^M","resources/public/js/rum/core.cljs","^N",184,"^O",1,"^P",184,"^Q",21,"^1=",true,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",184,"^O",16,"^P",184,"^Q",21,"^1=",true]],"~$with-ref",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",255,"^O",7,"^P",255,"^Q",15,"^R",["^S",["^T",["^S",[["^U","^9"]]]]],"^W","Adds React ref (string or callback) to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-ref \"abc\")\n       (rum/mount js/document.body))\n   ```"],"^:","~$rum.core/with-ref","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",15,"^Z",["^S",[["^U","^9"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",255,"^P",255,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^U","^9"]]]]],"^W","Adds React ref (string or callback) to element.\n   \n   ```\n   (rum/defc label [text] [:div text])\n\n   (-> (label)\n       (rum/with-ref \"abc\")\n       (rum/mount js/document.body))\n   ```"],"~$build-defc",["^ ","^1U",true,"^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",151,"^O",16,"^P",151,"^Q",26,"^1U",true,"^R",["^S",["^T",["^S",[["^1V","^1W","^1X"]]]]]],"^:","~$rum.core/build-defc","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",26,"^Z",["^S",[["^1V","^1W","^1X"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",151,"^P",151,"^11",3,"^12",true,"^R",["^S",["^T",["^S",[["^1V","^1W","^1X"]]]]]],"~$hydrate",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",227,"^O",7,"^P",227,"^Q",14,"^R",["^S",["^T",["^S",[["^U","^V"]]]]],"^W","Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]]."],"^:","~$rum.core/hydrate","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",14,"^Z",["^S",[["^U","^V"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",227,"^P",227,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^U","^V"]]]]],"^W","Same as [[mount]] but must be called on DOM tree already rendered by a server via [[render-html]]."],"~$build-defcc",["^ ","^1U",true,"^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",168,"^O",16,"^P",168,"^Q",27,"^1U",true,"^R",["^S",["^T",["^S",[["^1V","^1W","^1X"]]]]]],"^:","~$rum.core/build-defcc","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",27,"^Z",["^S",[["^1V","^1W","^1X"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",168,"^P",168,"^11",3,"^12",true,"^R",["^S",["^T",["^S",[["^1V","^1W","^1X"]]]]]],"^G",["^ ","^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",433,"^O",3,"^P",433,"^Q",15,"~:style/indent",2,"^R",["^S",["^T",["^S",[["~$refs","^17","~$f"],["^2I","^17","~$f","~$opts"]]]]],"^W","Use this to create “chains” and acyclic graphs of dependent atoms.\n   \n             [[derived-atom]] will:\n          \n             - Take N “source” refs.\n             - Set up a watch on each of them.\n             - Create “sink” atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \":\" b))))\n             \n             (type *x) ;; => clojure.lang.Atom\n             (deref *x) ;; => \"0:1\"\n             \n             (swap! *a inc)\n             (deref *x) ;; => \"1:1\"\n             \n             (reset! *b 7)\n             (deref *x) ;; => \"1:7\"\n             ```\n\n             Arguments:\n          \n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won’t be called. Set to `false` if checking for equality can be expensive."],"^:","~$rum.core/derived-atom","^M","resources/public/js/rum/core.cljs","^Q",15,"^O",1,"^N",392,"^2H",2,"^P",433,"^R",["^S",["^T",["^S",[["^2I","^17","~$f"],["^2I","^17","~$f","^2J"]]]]],"^W","Use this to create “chains” and acyclic graphs of dependent atoms.\n   \n             [[derived-atom]] will:\n          \n             - Take N “source” refs.\n             - Set up a watch on each of them.\n             - Create “sink” atom.\n             - When any of source refs changes:\n                - re-run function `f`, passing N dereferenced values of source refs.\n                - `reset!` result of `f` to the sink atom.\n             - Return sink atom.\n\n             Example:\n\n             ```\n             (def *a (atom 0))\n             (def *b (atom 1))\n             (def *x (derived-atom [*a *b] ::key\n                       (fn [a b]\n                         (str a \":\" b))))\n             \n             (type *x) ;; => clojure.lang.Atom\n             (deref *x) ;; => \"0:1\"\n             \n             (swap! *a inc)\n             (deref *x) ;; => \"1:1\"\n             \n             (reset! *b 7)\n             (deref *x) ;; => \"1:7\"\n             ```\n\n             Arguments:\n          \n             - `refs` - sequence of source refs,\n             - `key`  - unique key to register watcher, same as in `clojure.core/add-watch`,\n             - `f`    - function that must accept N arguments (same as number of source refs) and return a value to be written to the sink ref. Note: `f` will be called with already dereferenced values,\n             - `opts` - optional. Map of:\n               - `:ref` - use this as sink ref. By default creates new atom,\n               - `:check-equals?` - Defaults to `true`. If equality check should be run on each source update: `(= @sink (f new-vals))`. When result of recalculating `f` equals to the old value, `reset!` won’t be called. Set to `false` if checking for equality can be expensive."],"~$render",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",200,"^O",8,"^P",200,"^Q",14,"^1=",true,"^R",["^S",["^T",["^S",[[]]]]]],"^1=",true,"^:","~$rum.core/render","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",14,"^Z",["^S",[[]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",200,"^P",200,"^11",0,"^12",true,"^R",["^S",["^T",["^S",[[]]]]]],"~$empty-queue",["^ ","^:","~$rum.core/empty-queue","^M","resources/public/js/rum/core.cljs","^N",190,"^O",1,"^P",190,"^Q",27,"^1=",true,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",190,"^O",16,"^P",190,"^Q",27,"^1=",true]],"~$build-class",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",26,"^O",8,"^P",26,"^Q",19,"^1=",true,"^R",["^S",["^T",["^S",[["^2L","^1W","^1X"]]]]]],"^1=",true,"^:","~$rum.core/build-class","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",19,"^Z",["^S",[["^2L","^1W","^1X"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",26,"^P",26,"^11",3,"^12",true,"^R",["^S",["^T",["^S",[["^2L","^1W","^1X"]]]]]],"~$build-ctor",["^ ","^K",null,"^L",["^ ","^M","/Users/vas/nos.lv/nesferado/resources/public/js/rum/core.cljs","^N",137,"^O",8,"^P",137,"^Q",18,"^1=",true,"^R",["^S",["^T",["^S",[["^2L","^1W","^1X"]]]]]],"^1=",true,"^:","~$rum.core/build-ctor","^Y",false,"^M","resources/public/js/rum/core.cljs","^Q",18,"^Z",["^S",[["^2L","^1W","^1X"]]],"^[",null,"^10",["^S",[null,null]],"^O",1,"^N",137,"^P",137,"^11",3,"^12",true,"^R",["^S",["^T",["^S",[["^2L","^1W","^1X"]]]]]]],"~:require-macros",["^ ","^;","^;","^C","^C"],"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:rum/react-component","~:did-mount","~:will-unmount","^L","~:did-remount","~:rum/class","~:init","~:did-catch","~:child-context","~:rum.reactive/key","~:rum/args","~:before-render","~:did-update","~:key-fn","~:will-mount","~:rum/component-stack","~:will-update","~:class-properties","~:rum/local","~:after-render","~:static-properties","~:wrap-render","~:rum.reactive/refs","~:should-update"]],"~:order",["^30","^38","^35","^3?","^2X","^3=","^2Z","^3A","^3:","^36","^31","^2Y","^32","^3;","^3>","^2W","^39","^37","^34","^2[","^3<","^33","^3@","^L"]],"^W",null]